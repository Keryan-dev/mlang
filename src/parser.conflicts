
** Conflict (shift/reduce) in state 74.
** Tokens involved: OR AND
** The following explanations concentrate on token OR.
** This state is reached from source_file after reading:

VERIFICATION SYMBOL nonempty_list(SYMBOL) COLON application_reference SEMICOLON IF FOR loop_variables COLON expression_item 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

source_file 
source_file_item source_file 
verification 
VERIFICATION SYMBOL nonempty_list(SYMBOL) COLON application_reference SEMICOLON verification_condition nonempty_list(verification_condition) 
                                                                                IF expression THEN ERROR nonempty_list(SYMBOL) SEMICOLON 
                                                                                   (?)

** In state 74, looking ahead at OR, reducing production
** expression -> expression_item 
** is permitted because of the following sub-derivation:

expression_item OR expression // lookahead token appears
comparison // lookahead token is inherited
sum_expression // lookahead token is inherited
product_expression // lookahead token is inherited
factor // lookahead token is inherited
FOR loop_expression // lookahead token is inherited
    loop_variables COLON expression // lookahead token is inherited
                         expression_item . 

** In state 74, looking ahead at OR, shifting is permitted
** because of the following sub-derivation:

expression_item 
comparison 
sum_expression 
product_expression 
factor 
FOR loop_expression 
    loop_variables COLON expression 
                         expression_item . OR expression 

** Conflict (shift/reduce) in state 69.
** Tokens involved: TIMES DIV
** The following explanations concentrate on token TIMES.
** This state is reached from source_file after reading:

VERIFICATION SYMBOL nonempty_list(SYMBOL) COLON application_reference SEMICOLON IF FOR loop_variables COLON factor 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

source_file 
source_file_item source_file 
verification 
VERIFICATION SYMBOL nonempty_list(SYMBOL) COLON application_reference SEMICOLON verification_condition nonempty_list(verification_condition) 
                                                                                IF expression THEN ERROR nonempty_list(SYMBOL) SEMICOLON 
                                                                                   expression_item 
                                                                                   comparison 
                                                                                   sum_expression 
                                                                                   product_expression 
                                                                                   (?)

** In state 69, looking ahead at TIMES, reducing production
** product_expression -> factor 
** is permitted because of the following sub-derivation:

factor product_operator product_expression // lookahead token appears because product_operator can begin with TIMES
FOR loop_expression // lookahead token is inherited
    loop_variables COLON expression // lookahead token is inherited
                         expression_item // lookahead token is inherited
                         comparison // lookahead token is inherited
                         sum_expression // lookahead token is inherited
                         product_expression // lookahead token is inherited
                         factor . 

** In state 69, looking ahead at TIMES, shifting is permitted
** because of the following sub-derivation:

factor 
FOR loop_expression 
    loop_variables COLON expression 
                         expression_item 
                         comparison 
                         sum_expression 
                         product_expression 
                         factor product_operator product_expression 
                                . TIMES 

** Conflict (shift/reduce) in state 61.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from source_file after reading:

VERIFICATION SYMBOL nonempty_list(SYMBOL) COLON application_reference SEMICOLON IF FOR loop_variables COLON product_expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

source_file 
source_file_item source_file 
verification 
VERIFICATION SYMBOL nonempty_list(SYMBOL) COLON application_reference SEMICOLON verification_condition nonempty_list(verification_condition) 
                                                                                IF expression THEN ERROR nonempty_list(SYMBOL) SEMICOLON 
                                                                                   expression_item 
                                                                                   comparison 
                                                                                   sum_expression 
                                                                                   (?)

** In state 61, looking ahead at PLUS, reducing production
** sum_expression -> product_expression 
** is permitted because of the following sub-derivation:

product_expression sum_operator sum_expression // lookahead token appears because sum_operator can begin with PLUS
factor // lookahead token is inherited
FOR loop_expression // lookahead token is inherited
    loop_variables COLON expression // lookahead token is inherited
                         expression_item // lookahead token is inherited
                         comparison // lookahead token is inherited
                         sum_expression // lookahead token is inherited
                         product_expression . 

** In state 61, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

product_expression 
factor 
FOR loop_expression 
    loop_variables COLON expression 
                         expression_item 
                         comparison 
                         sum_expression 
                         product_expression sum_operator sum_expression 
                                            . PLUS 

** Conflict (shift/reduce) in state 52.
** Tokens involved: NEQ LTE LT GTE GT EQUALS
** The following explanations concentrate on token NEQ.
** This state is reached from source_file after reading:

VERIFICATION SYMBOL nonempty_list(SYMBOL) COLON application_reference SEMICOLON IF FOR loop_variables COLON sum_expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

source_file 
source_file_item source_file 
verification 
VERIFICATION SYMBOL nonempty_list(SYMBOL) COLON application_reference SEMICOLON verification_condition nonempty_list(verification_condition) 
                                                                                IF expression THEN ERROR nonempty_list(SYMBOL) SEMICOLON 
                                                                                   expression_item 
                                                                                   comparison 
                                                                                   (?)

** In state 52, looking ahead at NEQ, reducing production
** comparison -> sum_expression 
** is permitted because of the following sub-derivation:

sum_expression comparison_op sum_expression // lookahead token appears because comparison_op can begin with NEQ
product_expression // lookahead token is inherited
factor // lookahead token is inherited
FOR loop_expression // lookahead token is inherited
    loop_variables COLON expression // lookahead token is inherited
                         expression_item // lookahead token is inherited
                         comparison // lookahead token is inherited
                         sum_expression . 

** In state 52, looking ahead at NEQ, shifting is permitted
** because of the following sub-derivation:

sum_expression 
product_expression 
factor 
FOR loop_expression 
    loop_variables COLON expression 
                         expression_item 
                         comparison 
                         sum_expression comparison_op sum_expression 
                                        . NEQ 
