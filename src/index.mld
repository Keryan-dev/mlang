{0 Verifisc}

The Verifisc compiler has a traditionnal architecture consisting of various
intermediate representations going fro mthe source code to the target backend.

{1 Frontend}

First, the source code is parsed according to the Menhir grammar specified in
{!module: Verifisc.Parser}. The grammar is not exactly LR(1) so we rely on {!module: Verifisc.Parse_utils}
to backtrack, especially on symbol parsing. The target intermediate representation
is {!module: Verifisc.Ast}, which is very close to the concrete syntax and can be
printed using {!module: Verifisc.Format_ast}.

{!modules: Verifisc.Ast Verifisc.Format_ast Verifisc.Parser Verifisc.Parse_utils }

{1 M Variable Graph}

The M language has a lot of weird syntactic sugars and constructs linked to its
usage inside multiple DGFiP applications. {!module: Verifisc.Ast_to_mvg } extracts from the
AST the computational core corresponding to a DGFiP application into the M Variable
Graph ({!module: Verifisc.Mvg}), which consists basically of a flat map of all the definitions of
the variables used in the application. The type system of M is very primitive,
and basically all programs typecheck ; however {!module: Verifisc.Typechecker} provides
a bidirectional typechecking algorithm with lattice-based unificiation (with {!module: Verifisc.Union_find})
to infer missing variable types.

At this point, the {!module: Verifisc.Dependency} modules interprets the MVG as a first-class
graph and computes various reachability and cycle analysis in order to determine
the computational flow inside the program.

{!modules: Verifisc.Mvg Verifisc.Ast_to_mvg Verifisc.Format_mvg Verifisc.Typechecker Verifisc.Union_find Verifisc.Dependency }

{1 Optimizations }

The MVG is the right place to perform some basic program optimizations. {!module: Verifisc.Functions}
expands all the functions used in the program to basic arithmetic operators, while
{!module: Verifisc.Partial_evaluation } simplify the MVG.

{!modules: Verifisc.Optimize Verifisc.Functions Verifisc.Partial_evaluation }

{1 Interpreter}

{!module: Verifisc.Interpreter} contains the dynamic semantics of the M language.
{!module: Verifisc.Interface } allows the user to specify its own inputs and outputs
on top of an existing M program.

{!modules: Verifisc.Interpreter Verifisc.Interface }

{1 Translation to Z3 }

Work in progress.

{!modules: Verifisc.Z3_encoding Verifisc.Format_z3 Verifisc.Mvg_to_z3}

{1 Utils }

{!modules: Verifisc.Cli Verifisc.Errors}
